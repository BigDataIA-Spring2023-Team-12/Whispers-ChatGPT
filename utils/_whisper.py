# Note: you need to be using OpenAI Python v0.27.0 for the code below to work
import openai
from decouple import config


# print(transcript)

def transcribe_audio(file_path: str, model: str) -> str:
    """
    Transcribes an audio file using the OpenAI API.

    Args:
        api_key (str): The OpenAI API key.
        file_path (str): The path to the audio file.
        model (str): The name of the OpenAI model to use for transcription.

    Returns:
        str: The transcription of the audio file.

    Example:
        api_key = os.getenv("OPENAI_API_KEY")
        file_path = "Apple Think Different - Steve Jobs Narrated Version.mp3"
        model = "whisper-1"

    """
    openai.api_key = config("OPENAI_API_KEY")
    audio_file = open(file_path, "rb")
    transcript = openai.Audio.transcribe(model, audio_file)
    return transcript


def generate_text(prompt):
    """
    Generates text using the OpenAI ChatCompletion API based on the given prompt.
    
    Args:
    - prompt (str): The prompt to use for the OpenAI ChatCompletion API.
    
    Returns:
    - response (str): The response generated by the OpenAI ChatCompletion API.
    """
    openai.api_key = config("OPENAI_API_KEY")

    completion = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[
            {"role": "user", "content": f"{prompt}"}
        ]
    )

    response = completion.choices[0].message["content"]
    return response


# Test transcript = transcribe_audio("ass-4/Apple Think Different - Steve Jobs Narrated Version.mp3","whisper-1")
# response = generate_text(f"{transcript} \n with the context above answer these question \n What is this passage
# trying to convey?") print(response)


# string to txt file
def string_to_txt(response):
    with open("naming_convention.txt", "w") as text_file:
        text_file.write(response)


questions = {
    1: "What was the main purpose or objective of the meeting?",
    2: "Were all the agenda items discussed and resolved?",
    3: "Was there any conflict or disagreement among the members during the meeting?",
    4: "Were there any significant changes or decisions made during the meeting that will impact the organization or "
       "community?",
    5: "Was everyone given the opportunity to participate and voice their opinions or concerns during the meeting?"
}


def create_prompt(response, questions):
    context = "\n Based on above answer the following questions:\n"

    for i, q in questions.items():
        context = context + f"{i}. {q}\n"

    prompt = response + context

    return prompt

# response = "The passage is trying to convey a message of admiration and encouragement for those who think
# differently and challenge the norms. It celebrates the crazy ones such as misfits, rebels, troublemakers who push
# the boundaries and ultimately drive progress and change in the world." print(create_prompt(response,questions))
